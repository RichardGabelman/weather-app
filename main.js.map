{"version":3,"file":"main.js","mappings":";;;;AAA4C;;AAErC;AACP;AACA,SAAS,WAAW;AACpB;AACA;AACA,kBAAkB,WAAW;AAC7B,oBAAoB,WAAW;AAC/B,2BAA2B,WAAW;AACtC,iBAAiB,WAAW;;AAE5B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,mBAAmB;AACvC,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AChEO;AACP,qGAAqG,SAAS;AAC9G,oCAAoC,cAAc;AAClD;AACA;;;ACJgD;AACZ;AACU;;AAEvC;AACP;;AAEA;AACA,+BAA+B,cAAc;AAC7C;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA,IAAI,aAAa;AACjB;AACA;;;ACf4C;AACI;;AAEzC;AACP;AACA;AACA;AACA;AACA,IAAI,WAAW;AACf,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI,aAAa;AACjB,GAAG;AACH;;;ACrBqB;AACiC;;AAEtD,cAAc","sources":["webpack://webpack-eslint-prettier-template/./src/modules/htmlGenerator.js","webpack://webpack-eslint-prettier-template/./src/modules/weather.js","webpack://webpack-eslint-prettier-template/./src/modules/weatherAPI.js","webpack://webpack-eslint-prettier-template/./src/modules/dataManager.js","webpack://webpack-eslint-prettier-template/./src/modules/eventSetup.js","webpack://webpack-eslint-prettier-template/./src/index.js"],"sourcesContent":["import { DataManager } from \"./dataManager\";\n\nexport class HTMLGenerator {\n  static updateHTML() {\n    if (!DataManager.currentWeatherObject) {\n      return;\n    }\n    const emoji = DataManager.currentWeatherObject.emoji;\n    const address = DataManager.currentWeatherObject.location;\n    const tempFahrenheit = DataManager.currentWeatherObject.temp;\n    const desc = DataManager.currentWeatherObject.description;\n\n    const card = document.querySelector(\".weatherCard\");\n\n    const addressDisplay = document.createElement(\"h2\");\n    addressDisplay.textContent = address;\n\n    const tempDisplay = document.createElement(\"div\");\n    const unitToggle = document.querySelector(\".unitToggle\");\n    const tempUnit = unitToggle.textContent;\n    if (tempUnit == \"C\") {\n      const tempCelsius = (tempFahrenheit - 32) / 1.8;\n      tempDisplay.textContent = tempCelsius.toFixed(1) + \"C\";\n    } else {\n      tempDisplay.textContent = tempFahrenheit + \"°F\";\n    }\n    tempDisplay.classList.add(\"temp\");\n\n    const descriptionDisplay = document.createElement(\"p\");\n    descriptionDisplay.textContent = emoji + \" \" + desc + \" \" + emoji;\n\n    card.textContent = \"\";\n    card.appendChild(unitToggle);\n    card.appendChild(addressDisplay);\n    card.appendChild(tempDisplay);\n    card.appendChild(descriptionDisplay);\n\n    const smalls = document.querySelectorAll(\".small\");\n    for (let i = 0; i < smalls.length; i++) {\n      const currDay = DataManager.currentWeatherObject.forecast[i];\n      const temp = currDay.temp;\n      const desc = currDay.desc;\n      const date = currDay.date;\n      const emoji = currDay.emoji;\n\n      const tempDisplay = document.createElement(\"h3\");\n      if (tempUnit == \"C\") {\n        const tempC = (temp - 32) / 1.8;\n        tempDisplay.textContent = tempC.toFixed(1) + \"C\";\n      } else {\n        tempDisplay.textContent = temp + \"°F\";\n      }\n\n      const descDisplay = document.createElement(\"p\");\n      descDisplay.textContent = desc + \" \" + emoji;\n\n      const dateDisplay = document.createElement(\"p\");\n      dateDisplay.textContent = date;\n\n      smalls[i].textContent = \"\";\n      smalls[i].append(tempDisplay);\n      smalls[i].append(descDisplay);\n      smalls[i].append(dateDisplay);\n    }\n  }\n}\n","export class Weather {\n  constructor(json) {\n    this.temp = json.currentConditions.temp;\n    this.location = json.resolvedAddress;\n    this.description = json.currentConditions.conditions;\n    this.forecast = this.nextSevenDays(json);\n    this.emoji = getWeatherEmoji(json.currentConditions.icon);\n  }\n\n  nextSevenDays(json) {\n    const jsonDays = json.days;\n    let days = [];\n    for (let i = 1; i < 8; i++) {\n      const thisDay = new SimpleWeather();\n      const currJsonDay = jsonDays[i];\n      thisDay.temp = currJsonDay.temp;\n      thisDay.desc = currJsonDay.conditions;\n      thisDay.date = currJsonDay.datetime;\n      thisDay.emoji = getWeatherEmoji(currJsonDay.icon);\n      days.push(thisDay);\n    }\n    return days;\n  }\n}\n\nfunction getWeatherEmoji(iconName) {\n  let emoji = \"\";\n  switch (iconName) {\n    case \"snow\":\n      emoji = \"🌨️\";\n      break;\n    case \"rain\":\n      emoji = \"🌧️\";\n      break;\n    case \"fog\":\n      emoji = \"🌫️\";\n      break;\n    case \"wind\":\n      emoji = \"💨\";\n      break;\n    case \"cloudy\":\n      emoji = \"🌥️\";\n      break;\n    case \"partly-cloudy-day\":\n      emoji = \"🌤️\";\n      break;\n    case \"partly-cloudy-night\":\n      emoji = \"🌙☁️\";\n      break;\n    case \"clear-day\":\n      emoji = \"☀️\";\n      break;\n    case \"clear-night\":\n      emoji = \"🌙\";\n      break;\n  }\n  return emoji;\n}\n\nclass SimpleWeather {\n  temp;\n  desc;\n  date;\n  emoji;\n}\n","export async function getWeatherData(location) {\n  const url = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}?key=L9CTUTHMAGAWR5CNWQGG93NPC`;\n  let response = await fetch(url, { mode: \"cors\" });\n  return await response.json();\n}\n","import { HTMLGenerator } from \"./htmlGenerator\";\nimport { Weather } from \"./weather\";\nimport { getWeatherData } from \"./weatherAPI\";\n\nexport class DataManager {\n  static currentWeatherObject;\n\n  static async updateWeather(location) {\n    let newWeatherJSON = await getWeatherData(location);\n    console.log(newWeatherJSON);\n    this.currentWeatherObject = new Weather(newWeatherJSON);\n    console.log(this.currentWeatherObject);\n    // update HTML\n    HTMLGenerator.updateHTML();\n  }\n}\n","import { DataManager } from \"./dataManager\";\nimport { HTMLGenerator } from \"./htmlGenerator\";\n\nexport function setupListeners() {\n  const submitBtn = document.querySelector(\".submit\");\n  submitBtn.addEventListener(\"click\", async () => {\n    const locationInput = document.querySelector(\"input\");\n    const location = locationInput.value;\n    DataManager.updateWeather(location);\n  });\n\n  const tempToggle = document.querySelector(\".unitToggle\");\n  tempToggle.addEventListener(\"click\", () => {\n    const currUnit = tempToggle.textContent;\n    if (currUnit == \"C\") {\n      tempToggle.textContent = \"°F\";\n    } else {\n      tempToggle.textContent = \"C\";\n    }\n    HTMLGenerator.updateHTML();\n  });\n}\n","import \"./style.css\";\nimport { setupListeners } from \"./modules/eventSetup\";\n\nsetupListeners();\n"],"names":[],"sourceRoot":""}